# plugingen.py -- Tools to generate plugins as luigi modules.

import plugin
import os
import sys
import datetime


def genheader(f):
    f.write("# Generated by ariadne on %s.\n" % datetime.date.today())
    f.write("import luigi\nimport os\n")


def gen(plugin, f, wrappername, plugindir):
    argnames=[]
    deps=[]
    
    try:
        argnames=plugin.get_arg_names()
    except:
        pass

    try:
        deps=plugin.depends()
    except:
        pass
    
    f.write("class %s_l(luigi.Task):\n" % wrappername)
    for a in argnames:
        f.write("    %s=luigi.Parameter()\n" % a)

    f.write("    def requires(self):\n")
    f.write("        return")
    if len(deps)>0:
        for d in deps:
            if d!=deps[0]:
                f.write(",")
            f.write(" %s_t(" % d.dependency_name)
            frst=None
            for a in d.arg_dict:
                if frst==None:
                    frst=a
                else:
                    f.write(",")
                f.write("%s" % str(d.arg_dict[a]))
            f.write(")")

    f.write("\n")
    f.write("    def run(self):\n")
    f.write("        os.system('ariadne.py runplugin %s %s" % (wrappername, plugindir))

    for a in argnames:
        f.write(" "+a+"="+"'+self."+a+"+'")

    f.write("')\n")

    fmod=plugin.files_modified()
    if len(fmod)!=0:
        f.write("   output(self):\n")
        f.write("       return ")
        for mod in fmod:
            if mod!=fmod[0]:
                f.write(",")
            f.write("luigi.LocalTarget('%s') " % mod)
        f.write("\n")
        
    f.flush()
